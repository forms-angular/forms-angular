<html lang="en"><head><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}</style>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>forms-angular</title>

    <style>[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
        display: none !important;
    }</style>

    <link rel="stylesheet" href="styles/68b473f6.main.css">
<style>.cke{visibility:hidden;}</style><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/config.js?t=E0LB"></script><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/skins/moono/editor.css?t=E0LB"><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/lang/en-gb.js?t=E0LB"></script><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/styles.js?t=E0LB"></script></head>
<body ng-app="myDemoApp" ng-controller="NavCtrl" ng-keyup="globalShortcuts($event)" style="" class="ng-scope">
<div class="visible-desktop">
    <a href="https://github.com/mchapman/forms-angular"><img src="img/270bc532.forkme_right_darkblue_121621.png" style="position: fixed; right: 0; top: 0; z-index: 1032"></a>
</div>

<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
            <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <div class="pull-left">
                <a class="brandpluslogo" href="/#!/index"><img src="/img/ae369a9e.Home_icon_black.png" width="45" alt="Click on logo to go to home page"></a>
            </div>
            <div class="visible-desktop pull-right span2"></div>   <!-- Leave some space for github flash -->
            <global-search class="global-search"><form class="navbar-search pull-right ng-pristine ng-valid">    <div id="search-cg" class="control-group" ng-class="errorClass">        <input type="text" id="searchinput" ng-model="searchTarget" class="search-query ng-pristine ng-valid" placeholder="Ctrl+Slash to Search" ng-keyup="handleKey($event)">    </div></form><div class="results-container ng-hide" ng-show="results.length &gt;= 1">    <div class="search-results">        <!-- ngRepeat: result in results -->    <div ng-show="moreCount &gt; 0" class="ng-hide">(plus more - continue typing to narrow down search...)</div></div></div></global-search>
            <div class="pull-right" style="padding-top: 14px"><iframe src="http://ghbtns.com/github-btn.html?user=mchapman&amp;repo=forms-angular&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe><iframe src="http://ghbtns.com/github-btn.html?user=mchapman&amp;repo=forms-angular&amp;type=fork&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe></div>
            <div class="nav-collapse">
                <ul class="nav">
                    <li><a href="/#!/get-started">Get Started</a></li>
                    <li><a href="/#!/schemas">Schemas</a></li>
                    <li><a href="/#!/forms">Forms</a></li>
                    <li><a href="/#!/reporting">Reporting</a></li>
                    <li class="dropdown"><a class="dropdown-toggle">More</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-option" href="/#!/examples">Examples</a></li>
                            <li><a class="dropdown-option" href="/#!/api-docs">API Documentation</a></li>
                            <li><a class="dropdown-option" href="https://github.com/mchapman/forms-angular/issues?state=open">Issues</a></li>
                            <li><a class="dropdown-option" href="https://github.com/mchapman/forms-angular/releases">Changelog</a></li>
                            <li><a class="dropdown-option" href="/#!/in-the-wild">Who Uses It?</a></li>
                        </ul>
                    </li>

                    <li ng-show="items.length &gt; 0" class="dropdown ng-hide">
                        <a class="dropdown-toggle ng-binding">
                            Forms
                        </a>
                        <ul class="dropdown-menu">
                            <!-- ngRepeat: choice in items -->
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- ngView:  --><div ng-view="" class="ng-scope"><div class="row-fluid ng-scope">
    <div class="page-header">
        <h1>Forms</h1>
        Finding, editing and reporting on data
    </div>
</div>

<div class="container-fluid ng-scope" ng-controller="DemoCtrl">
<div class="row-fluid">
<div class="span3">
    <ul class="hidden-phone nav nav-tabs nav-stacked docs-sidenav ng-scope" ui-scrollfix="-80"><!-- ngRepeat: affix in affixes --><li id="input-formOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>Input Form</a></li><!-- end ngRepeat: affix in affixes --><li id="listingOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>Listing Form</a></li><!-- end ngRepeat: affix in affixes --><li id="searchOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>Search</a></li><!-- end ngRepeat: affix in affixes --><li id="form-input-directiveOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>form-input Directive</a></li><!-- end ngRepeat: affix in affixes --><li id="client-side-customisationOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>Client Side Customization</a></li><!-- end ngRepeat: affix in affixes --><li id="server-side-customisationOpt" ng-repeat="affix in affixes" ng-click="scrollToSection(affix.id)" class="ng-scope"><a href="" class="ng-binding"><i class="icon-chevron-right pull-right"></i>Server Side Customization</a></li><!-- end ngRepeat: affix in affixes --></ul>
</div>


<div class="span9 affix-section">
<p>Forms angular comes with a small number of forms that can be used - sometimes with
small amendments - to meet a vast number of requirements.  They all use RESTful routes
and handle querying and updating the server</p>

    <p>For each model the following routes are supported (assuming hashbang urls with no <a href="https://developers.google.com/webmasters/ajax-crawling/">AJAX crawling</a>:</p>

    <ul>
        <li><strong>/#/:model</strong> which lists the documents in the collection, with links to the form for editing
            them
        </li>
        <li><strong>/#/:model/new</strong> which enables the user to create a new document using the default form for
            the collection
        </li>
        <li><strong>/#/:model/:id/edit</strong> which enables the user to edit a document</li>
        <li><strong>/#/:model/:id</strong> which enables the user to edit a document</li>
    </ul>

    <section id="input-form" name="Input Form" affix-scroll="">
        <h3>Input Form</h3>
        <p>The <strong>form-input</strong> directive expands the schema into nice looking
        data capture form, but that is only a small part of the story.  The <a href="/#!/get-started#base-edit-html">basic edit form</a>
        also gives you:</p>
            <ul>
                <li>Header section showing the key fields from the record.</li>
                <li><p>Buttons to perform the usual Save, Cancel, New and Delete operations.  forms-angular handles all
                    the back-end stuff for you.</p>
                    <p>The form button customisation is currently limited to over-riding the default enabled state of the buttons by
                    defining
                    functions in a controller for the model (or model and form). See <a href="/demo/controllers/d-array-example.js">here</a> for an
                    example.</p></li>
                <li>Error message section, which displays error messages when (for example) some server-side validation fails when updating something.</li>
            </ul>
    </section>
    <section id="listing" name="Listing Form" affix-scroll="">
        <h3>Listing Form</h3>

            <p>The listing routes (of the format <strong>/#/:model</strong>) are used to build a page
                containing a list of documents in the collection, showing the <a href="/#!/schemas#list-fields">list fields</a>.  You can
                specify a sort order by adding a <strong>listOrder</strong> value to the model as shown in <a href="/#!/code/g_conditional_fields.js">this</a> model.
                Alternatively you can specify a sort order at run-time using the o parameter as in <a href="/#!/f_nested_schema?o=%7B%22forename%22:1%7D">this</a> example.
            </p>

            <p>Listing routes support filters, such as</p>

            <a href="/#!/b_using_options?f=%7B%22surname%22:%22Smith%22%7D">
                <pre>/#/b_using_options?f={"surname":"Smith"}</pre>
            </a>

            <p>and calls to the aggregation framework, provided they project to an array of docs that contains an _id property
                which is used
                to select from the model. For example the (rather unpalatable)</p>
            <a href="/#!/f_nested_schema?a=%5B%7B%22%24unwind%22%3A%22%24exams%22%7D%2C%7B%22%24sort%22%3A%7B%22exams.score%22%3A1%7D%7D%2C%7B%22%24group%22%3A%7B%22_id%22%3A%7B%22id%22%3A%22%24_id%22%7D%2C%22bestSubject%22%3A%7B%22%24last%22%3A%22%24exams.subject%22%7D%7D%7D%2C%7B%22%24match%22%3A%7B%22bestSubject%22%3A%22English%22%7D%7D%2C%7B%22%24project%22%3A%7B%22_id%22%3A%22%24_id.id%22%7D%7D%5D">
                <pre>/#/f_nested_schema?a=[{"$unwind":"$exams"},{"$sort":{"exams.score":1}},{"$group":{"_id":{"id":"$_id"},"bestSubject":{"$last":"$exams.subject"}}},{"$match":{"bestSubject":"English"}},{"$project":{"_id":"$_id.id"}}]</pre>
            </a>

            <p>selects all students who did better in their English exam than any other subject. To find out how to use the
                aggregation framework refer to the <a href="http://docs.mongodb.org/manual/core/aggregation/">MongoDB docs</a>.
            </p>

            <p>These can be combined (though there appears to be a problem unless the filter precedes the aggregation).</p>

            <p>By default the list order is the MongoDB natural order. The default list order for a table can be set by
                specifying a <strong>listOrder</strong> option in the model definition (see <a href="/code/g_conditional_fields.js">g_conditional_fields</a> for an example).</p>
    </section>
    <section id="search" name="Search" affix-scroll="">
        <h3>Search</h3>
            <p>The smallest form is the search form, in the navbar at the top of this page. When you enter text into it the
                SearchCtrl controller makes a call to the server which looks for matching data by searching the indexed
                fields in each model for values starting with the search string.</p>

            <p>There are a number of options that can be added to model exports to modify the search behaviour. Examples can be
                found
                in the model definitions files for <a href="/code/f_nested_schema.js">f_nested_schema</a> and <a href="/code/g_conditional_fields.js">g_conditional_fields</a>.</p>
            <ul>
                <li><strong>searchImportance</strong> is a value from 0 to 99 (default) that can be used to determine the order
                    of table searches. There is an example in <a href="/code/g_conditional_fields.js">this</a> model.
                </li>
                <li><strong>searchOrder</strong> can be used to set the default ordering of the search results within a model.
                    There is an example in <a href="/code/g_conditional_fields.js">this</a> model.
                    It is normally used in conjunction with searchImportance.
                </li>
                <li><strong>searchResultFormat</strong> allows fine control of the display of search results. It points to a
                    function which returns an object which must contain the following:
                    <ul>
                        <li><strong>resource</strong> the model name (or model/customForm) that the search result will link to
                        </li>
                        <li><strong>resourceText</strong> the display name for the resource</li>
                        <li><strong>id</strong> the id to link to</li>
                        <li><strong>weighting</strong> is a value from 0 to 9999 (default) that specifies the sort ordering</li>
                        <li><strong>text</strong> the display text for the item</li>
                    </ul>
                    Both the resource and resourceText can be localised by a line of code like
                    <pre><code>DataFormHandler.getResource('person').options.localisationData = [{from: 'person/customer', to: 'person/client', context: 'resource'},{from:'Customer', to:'Client', context: 'resourceText'}];</code></pre>
                </li>
            </ul>

            A truthy <strong>noSearch</strong> key means index on a schema type is not used in the searchBox searches.
            A use case for this would be an index that is used in reports for grouping which has no meaning in a search.

            The top 10 search results appear below the search form, where the ordering is by a string built up as follows:
            <ul>
                <li>One digit 'hit weighting' where a record that has matched one string in the search query scores 9,
                    a record that has had two matches scores 8 etc.</li>
                <li>Two digit searchImportance</li>
                <li>Four digit weighting</li>
                <li>The display text</li>
            </ul>
        </section>
    

    <section id="form-input-directive" name="form-input Directive" affix-scroll="">
        <h3>The form-input Directive</h3>

        <p>The form-input directive, which is the core component of forms-angular, takes one mandatory attribute - schema -
            which is documented at the top of the <a href="/#!/schema.html">page</a> and some optional attributes.</p>

        <p>The optional attributes that can be passed for form-input are:</p>
        <ul>
            <li><strong>formstyle</strong> this attribute can take the values <strong>vertical</strong>, <strong>horizontal</strong>,
            <strong>inline</strong> and <strong>horizontalCompact</strong>.  The first three generate the markup for a Twitter Bootstrap 2 style and the last slightly modified style. <strong>vertical</strong>
            generates markup that works with the default form style, and the others needs classes adding as follows:
                <table class="table table-striped">
                    <tbody><tr>
                        <th>formstyle</th>
                        <th>Associated Bootstrap class(es)</th>
                    </tr>
                    <tr>
                        <td>horizontal</td>
                        <td>form-horizontal</td>
                    </tr>
                    <tr>
                        <td>horizontalCompact (or just compact)</td>
                        <td>form-horizontal compact</td>
                    </tr>
                    <tr>
                        <td>inline</td>
                        <td>form-inline</td>
                    </tr>
                </tbody></table>
                <p>Forms and sub forms that are created by the directive will have these classes added in the appropriate place.</p></li>
            <li><strong>model</strong> the object in the scope to be bound to the model controller.  Specifying
            the model inhibits the generation of the <strong>form</strong> tag unless the <strong>forceform</strong> attribute is set to true</li>
            <li><strong>name</strong> the name to be given to the form</li>
            <li><strong>forceform</strong> can be set to true to force the generation of the <strong>form</strong>
            attribute under circumstances where it would generally not be generated (generally if a model attribute is used)</li>
            <li><strong>noautofocus</strong> can be set to true if you don't want the first field to receive focus</li>
<!--TODO complete this list            -->
        </ul>
    </section>

    <section id="client-side-customisation" name="Client Side Customization" affix-scroll="">
        <h3>Client Side Customization</h3>

        <p>Additional functionality can be added by using "model controllers" which have the name of
        a model followed by <strong>Ctrl</strong> (or the name of the model followed by the name of
        the custom form followed by Ctrl. There is an sample model controller <a href="/demo/controllers/b-using-options.js">here</a>
        which is used in the examples in this section. The NavCtrl controller handles the model controllers, so don't remove
        it.</p>

        <h5 id="naming">Naming</h5>
        <p>The BaseCtrl scope has a variable called <strong>modelNameDisplay</strong> which is used in several places in the
        demo app. It defaults to the model name in title case, but can be over-ridden in the model controller.</p>

        <h5>Menu</h5>

        <p>The menu can be added to where required by the models (see an example <a href="/#!/b_using_options">here</a>)
            The options can be configured to appear when records are being listed, edited or created. The top level text is
            taken from the model controller's <strong>dropDownDisplay</strong> variable, if present. If not present it will
            fall back to the modelNameDisplay (see above) and if that is not present the model name.</p>

        <p>Sometimes menu options only apply to a subset of records in a collection.  In this case they can be hidden by
            specifying an <strong>isHidden($index)</strong> function.  For example to hide the option when a field has a
            certain value:</p>

        <pre><code>$scope.contextMenu = [{
            text: 'Do something',
            fn : function() {// some code},
            isHidden: function() {return $scope.record._id ? $scope.record.field === 'value' : true; },
            ...
            }];</code></pre>

        <h5 id="postprocessing">Post form-input generation processing</h5>

        <p>The form-input directive broadcasts a <strong>formInputDone</strong> message when it has
            processed a control. This can be acted on by the model controller. In our <a href="/#!/b_using_options/new">example</a> we
            add a change handler to a select2 control which changes background color of a control group
            when the eye colour is changed.  Try it, and then see how it is done at the bottom of
            <a href="/demo/controllers/b-using-options.js">this</a> controller.</p>

        <h5>Client side data events</h5>

        <p>There are hooks before and after CRUD events as follows:</p>
        <ul>
            <li>onBeforeCreate function(data, callback(err))</li>
            <li>onAfterCreate function(data)</li>
            <li>onBeforeRead function(id, callback(err))</li>
            <li>onAfterRead function(data)</li>
            <li>onBeforeUpdate function(data, old, callback(err))</li>
            <li>onAfterUpdate function(data, old)</li>
            <li>onBeforeDelete function(old, callback(err))</li>
            <li>onAfterDelete function(old)</li>
        </ul>
        <p>In all onBefore... cases passing an error back will stop the event completing. There is a trivial example of
            how a data event hook might be used in <a href="/demo/controllers/d-array-example.js">this</a> controller, which shows
            how such event handlers are set up.</p>

        <p>You can also call onRecordChange function(data, old) which is useful for updating calculated fields etc.</p>

        <h5>Adding additional attributes to all elements.</h5>
        <p>It is possible to apply additional attributes to all elements of a certain type by passing it once in the form-input declaration. The available types are Control Group, Field or Label.</p>
        <p>This can be achieved in two ways. Either as an attribute of the form-input element:</p>
        <pre>&lt;form-input schema="formSchema" <span>add-all-group="injected-element='with parameters'"</span>&gt;</pre>
        <p>or via the controller by making it an attribute of scope: </p><pre><span>$scope.addAllGroup="injected-attribute"</span></pre><p></p>
        <p>The three versions of this are:</p>
        <ul>
            <li>add-all-group="injected-attribute"</li>
            <li>add-all-field="injected-attribute"</li>
            <li>add-all-label="injected-attribute"</li>
        </ul>
        <p>For example if wished to inject a directive called 'hide-on-empty' to every individual control group then you would add:</p>
        <pre>add-all-group="hide-on-empty"</pre>
        <p>to the form-input declaration.</p>
        <p>If declared in a controller then it will be applied to all child controllers. If declared in the form-input element
            the scope is limited to the individual form's scope. In this way a single declaration at the root scope is seem by all controllers.</p>
        <p>Due to the parse method, in order declare multiple classes each class must be prefixed with 'class=' e.g.</p>
        <pre>&lt;form-input schema="formSchema" <span>add-all-group="injected-element='with parameters' class=myclass class=my-second-class"</span>&gt;</pre>

    </section>

    <section id="server-side-customisation" name="Server Side Customization" affix-scroll="">
        <h3>Server Side Customization</h3>

        <h5>Server side data events</h5>

        <p>On the server side there are hooks around data events as follows:</p>
        <ul>
            <li>findFunc function(req, callback(err, query)) applies a filter to records returned by the server. A common
                use case is to restrict a user to only see their own records.
            </li>
            <li>onSave function(doc, req, callback(err)) is a pre save hook that allows access to the record and the
                environment. A common use case is to apply 'fine-grain' authentication.
            </li>
        </ul>
        <p>There are examples of both in <a href="/code/b_using_options.js">this</a> model</p>
    </section>

</div>
</div>
</div></div>
<footer class="footer">
    <div class="container-fluid">
        <p>Code licensed under <a href="http://opensource.org/licenses/MIT" target="_blank">MIT License</a>, documentation under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.</p>
        <ul class="footer-links">
            <li><a href="https://github.com/mchapman/forms-angular/issues?state=open">Issues</a></li>
            <li class="muted">·</li>
            <li><a href="https://github.com/mchapman/forms-angular/releases">Changelog</a></li>
        </ul>
    </div>
</footer>

<!-- what forms-angular depends on -->
<!-- *** Section must be copied to partials/get-started/index.html if it is changed *** -->
<script src="scripts/5e7573ab.plugins.js"></script>
<!--[if lt IE 9]>
<script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7/html5shiv.js"></script>
<![endif]-->
<script>
    var CKEDITOR_BASEPATH = '//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/';
</script>
<script src="//cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/ckeditor.min.js"></script>
<!-- forms-angular stuff -->
<!--This section needs to stay in sync with the concat section of the Gruntfile-->
<script src="scripts/042ee584.lib.js"></script>

<!--Demo application stuff-->
<script src="scripts/2751df1e.app.js"></script>

<script type="text/javascript">
    if (window.location.hostname != '0.0.0.0') {
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-3037487-9']);
        _gaq.push(['_trackPageview']);

        (function () {
            var ga = document.createElement('script');
            ga.type = 'text/javascript';
            ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(ga, s);
        })();
    }
</script>


<script id="hiddenlpsubmitdiv" style="display: none;"></script><script>try{for(var lastpass_iter=0; lastpass_iter < document.forms.length; lastpass_iter++){ var lastpass_f = document.forms[lastpass_iter]; if(typeof(lastpass_f.lpsubmitorig2)=="undefined"){ lastpass_f.lpsubmitorig2 = lastpass_f.submit; lastpass_f.submit = function(){ var form=this; var customEvent = document.createEvent("Event"); customEvent.initEvent("lpCustomEvent", true, true); var d = document.getElementById("hiddenlpsubmitdiv"); if (d) {for(var i = 0; i < document.forms.length; i++){ if(document.forms[i]==form){ d.innerText=i; } } d.dispatchEvent(customEvent); }form.lpsubmitorig2(); } } }}catch(e){}</script><div id="ui-datepicker-div" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"><div class="ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all"><a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="Prev"><span class="ui-icon ui-icon-circle-triangle-w">Prev</span></a><a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="Next"><span class="ui-icon ui-icon-circle-triangle-e">Next</span></a><div class="ui-datepicker-title"><span class="ui-datepicker-month">December</span>&nbsp;<span class="ui-datepicker-year">2013</span></div></div><table class="ui-datepicker-calendar"><thead><tr><th class="ui-datepicker-week-end"><span title="Sunday">Su</span></th><th><span title="Monday">Mo</span></th><th><span title="Tuesday">Tu</span></th><th><span title="Wednesday">We</span></th><th><span title="Thursday">Th</span></th><th><span title="Friday">Fr</span></th><th class="ui-datepicker-week-end"><span title="Saturday">Sa</span></th></tr></thead><tbody><tr><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">1</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">2</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">3</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">4</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">5</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">6</a></td><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">7</a></td></tr><tr><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">8</a></td><td class="  ui-datepicker-current-day" data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default ui-state-active" href="#">9</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">10</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">11</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">12</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">13</a></td><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">14</a></td></tr><tr><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">15</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">16</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">17</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">18</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">19</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">20</a></td><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">21</a></td></tr><tr><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">22</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">23</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">24</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">25</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">26</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">27</a></td><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">28</a></td></tr><tr><td class=" ui-datepicker-week-end " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">29</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">30</a></td><td class=" " data-handler="selectDay" data-event="click" data-month="11" data-year="2013"><a class="ui-state-default" href="#">31</a></td><td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td><td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td><td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td><td class=" ui-datepicker-week-end ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td></tr></tbody></table></div></body></html>
